I"7(<p>I began writing this blog post a few weeks after releasing a semi-satirical article about my take on the mix of current CSS naming convention/styling trends on Sitepoint called <a href="http://sitepoint.com/atomic-oobemitscss/">Atomic OOBEMITSCSS</a>. That was back in August, but life got in the way. I called it <em>Atomic OOBEMITSCSS</em> as a joke, but people started picking up the name and using it in the wild (which was honestly pretty entertaining as questions about it sprung up in-person). Debate over using <code>@extend</code> at SassConf this year (and on Twitter lately) reminded me about revisiting this idea.</p>

<h2 id="classy-css-please">Classy CSS, Please.</h2>

<p>In the article mentioned above (Atomic OOBEMITSCSS), I explain how I mark up components (via an example using Pinterest) and correlate their styling. I still use that post as a handy manual for people around me who ask about our front-end architecture, which has since been stress-tested on a large-scale pattern library.</p>

<figure class="left">
  <img src="../../images/posts/classy-css/ex.jpg" />
  <figcaption>One of the examples from the Sitepoint article.</figcaption>
</figure>

<p>Consequently, I have found myself needing to explain the system (and Sass itself) to people with traditional computer science backgrounds. Doing so made me realize just how programmatic and class-based the CSS architecture system I described in the article was. So I’d like to take a moment to give it a legitimate name that I can actually get behind, <strong>Classy CSS,</strong> and to also explain it in a way that a traditional programmer may find a bit closer to home.</p>

<p>This post has three goals:</p>

<ol>
  <li>To defend <code>@extend</code></li>
  <li>To introduce <strong>Classy CSS</strong> (much easier to pronounce than Atomic OOBEMITSCSS)</li>
  <li>To explain a scalable, modular, and class-based approach to CSS</li>
</ol>

<h2 id="a-classy-button">A Classy Button</h2>

<p>I’ll go into a little bit more depth with how it works here, using a button as my example (because the button is the “hello world” of CSS):</p>

<p><img src="../../images/posts/classy-css/buttons.png" alt="buttons" style="max-width: 500px;" /></p>

<p>We start with a silent placeholder selector with the base code for every single button, using a modified BEM-like syntax. The first part of its naming is going to be the object we’re referencing (button or btn) and after a double dash, we have the modifier (base in this case). <strong>Note:</strong> variables are named in the same way — the type of variable being the base (color in the case of the below example).</p>

<pre><code class="language-sass">$color--primary: #b29;
$color--secondary: #19d;

%btn--base {
  border: 1px solid currentColor;
  border-radius: 1.5em;
  background: none;
  outline: none;
  transition-duration: .25s;
  cursor: pointer;
  margin: 30px;
  padding: .5em 1em;

  &amp;:hover {
    color: white;
    background: black;
  }
}
</code></pre>

<p><strong>This base button is our button class.</strong> We will be building on top of this for every button, as <strong>every button is an instance of that class</strong>. Every button element has the type button, and thus shares some common traits (solid outline, transparent background, etc.). Every button pulls from the same common properties and builds on <em>top</em> of them. They do not overwrite, but add onto those properties. They are all buttons++ and inherit from the base button. <em>(was that enough ways to say the same thing?)</em></p>

<figure class="right">
<img src="../../images/posts/classy-css/ydkjs-fig.png" alt="protoypal inheritance" style="max-width: 500px;" />
<figcaption>Prototypal inheritance illustration from <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/ch5.md">You Don't Know JS: This &amp; Object Prototypes</a></figcaption>
</figure>

<pre><code class="language-sass">%btn--primary {
  @extend %btn--base;
  color: $color--primary;
  font-size: 1.5em;
}

%btn--secondary {
  @extend %btn--base;
  color: $color--secondary;
  font-size: 1.1em;
}
</code></pre>

<p>usage here:</p>

<pre><code class="language-sass">.hero__btn {
  @extend %btn--primary;
  margin: 2em;
}

.sidebar__btn {
  @extend %btn--secondary
}

.global-nav__btn--login {
  @extend %btn--secondary;
  margin-right: 1em;
}
</code></pre>

<p>If you’re writing those in the <em>classy</em> way, each <strong>component</strong> (hero, sidebar, global-nav) would have its own partial .scss file where the classes are being instantiated for real use. That could look something like:</p>

<p>_hero.scss</p>

<pre><code class="language-sass">.hero {

  ...

  &amp;__btn {
    @extend %btn--primary;
  }

  ...

}
</code></pre>

<p>_sidebar.scss</p>

<pre><code class="language-sass">.sidebar {

  ...

  &amp;__btn {
    @extend %btn--secondary;
  }

  ...

}
</code></pre>

<p>_global-nav.scss</p>

<pre><code class="language-sass">.global-nav {

    ...

    &amp;__btn {
      @extend %btn--secondary;

      &amp;--login {
        @extend .global-nav__btn;
        margin-right: 1em;
        // at this point, you're
        // styling .global-nav__btn--login
    }
  }
}
</code></pre>

<h2 id="well-what-about-mixins">Well, What About Mixins?</h2>

<p>You may be wondering, well why not use a <code>@mixin</code> instead? In the way that we’re breaking up these classes, the purpose and concept of using <code>@extend</code> makes more sense. You can create mixins within the placeholder classes we are extending from to build out styles, and then use <code>@extend</code> to instantiate those into classes.</p>

<h2 id="in-defense-of-extend">In Defense of @extend</h2>

<p>Using <code>@extend</code> allows a smaller output CSS file and cleaner code if you understand what is going on (we’re appending styles instead of duplicating them). You can argue that this isn’t a concern with gzip compression, but you can’t always ensure gzip compression unless you have access to server configuration settings.</p>

<p>To understand and use <code>@extend</code> effectively, it’s really important to understand exactly what’s <em>“going on”</em> and the underlying differences between <code>@mixin</code> vs. <code>@extend</code>. Here is a visual:</p>

<figure class="half--left">
<figcaption>@mixin</figcaption>
<img src="../../images/posts/classy-css/mixin.png" />
</figure>

<figure class="half--right">
<figcaption>@extend</figcaption>
<img src="../../images/posts/classy-css/extend.png" />
</figure>

<div class="clearfix"></div>

<blockquote>
  <p>A <code>@mixin</code> is like a <strong>stamp</strong>: it creates a duplicated version of the property block (optionally) with arguments provided. An <code>@extend</code> <strong>appends the element</strong> you are extending to the property block. It is your <strong>“yes, and ___“</strong> statement.</p>
</blockquote>

<p>This means that we have a smaller output CSS file because we are not reproducing the code block each time we are implementing it. The <code>@extend</code> simply allows us to <em>reference</em> the properties. Extends are so perfect for this! Their logical purpose makes sense. <strong><a href="" class="twitter-share">#teamExtend</a></strong></p>

<p>The downside of this is that we have no control over <em>where</em> the block of properties lives since we are not invoking a new instance of that code block within the property, simply referencing it to pull styles from (which is why you can’t use <code>@extend</code> within media queries). But this doesn’t matter if we are following principles of <em>Classy CSS.</em> You extend silent placeholders into actual, usable classes to instantiate them, and <code>@mixin</code>s are reserved for a different purpose. They are used inside of the silent placeholders to build the code which is then extended.</p>

<blockquote>
  <p>In the case of <em>Classy CSS,</em> <strong>mixins are like constructors</strong> and you only use them within silent placeholder selectors.</p>
</blockquote>

<p>For instance, lets make a button mixin to make primary and secondary buttons easier to build out:</p>

<pre><code>// the colon after the argument denotes a default value
// creating the constructor function (mixin)

@mixin btn-me($color: hotpink, $size: normal) {
  border: 1px solid $color;
  border-radius: 1.5em;
  background: none;
  outline: none;
  transition-duration: .25s;
  cursor: pointer;
  margin: 30px;
  padding: .5em 1em;

  @if $size == 'small' {
    font-size: .8em;
  } @else {
    font-size: 1.2em;
  }

  &amp;:hover {
    color: white;
    background: $color;
  }
}

// creating placeholder classes to extend from and reference

%btn--primary {
  @include btn-me; // no arguments means it takes defaults
}

%btn--secondary {
  @include btn-me(blue, small)
}

// instantiating the code with semantic naming
// this is the only moment that we are writing
// any code to be compiled
.hero__btn {
  @extend %btn--secondary;
}
</code></pre>

<p>And the CSS output looks like:</p>

<pre><code>.hero__btn {
  border: 1px solid blue;
  border-radius: 1.5em;
  background: none;
  outline: none;
  transition-duration: .25s;
  cursor: pointer;
  margin: 30px;
  padding: .5em 1em;
  font-size: .8em;
}

.hero__btn:hover {
  color: white;
  background: blue;
}
</code></pre>

<h2 id="benefits">Benefits</h2>

<p>This is clearly an opinionated system, and  may seem a bit complex to the uninitiated, but once you get started with it, it really helps with naming and architectural decisions.</p>

<p>Benefits include:</p>

<ul>
  <li>Ensures code organized in a way that prevents specificity clashing and overrides (see <a href="http://csswizardry.com/2014/10/the-specificity-graph/">ITCSS</a>) — which means CSS is streamlines, performant, and a smaller CSS file size is output</li>
  <li>A consistent naming convention (<a href="http://getbem.com/naming/">BEM</a>) keeps uniformity among teams and provides a reference to reduce confusion</li>
  <li>The system is organized, maintainable, and scalable</li>
</ul>

<blockquote>
  <p>Keep it classy. Keep it Sassy <span style="font-style: normal">💁</span></p>
</blockquote>

<p>Ok.. I’ll walk myself out.</p>
:ET