I"Ö%<p>As a <del>designer or developer</del> person who uses a computer, the terminal is your best friend! But understandably, that big white or black box with a ticking pointer can appear very intimidating. Especially when filled with red error messages or when entering commands blindly from the internet (don‚Äôt do that!).</p>

<p>Education is key here. When you understand what some basic commands are doing, you can overcome terminal-dation (just go with it) and really improve your work flow!</p>

<p><strong>Please Note: The following article focuses on unix-based systems (like Mac) only. I can‚Äôt help you with Windows. Sorry!</strong></p>

<h2 id="working-the-command-line">Working the Command Line</h2>

<p>If you‚Äôre only using the terminal <em>sometimes</em> ‚Äî maybe to run task runners (like <a href="https://github.com/gulpjs/gulp">Gulp</a> or <a href="https://github.com/gruntjs/grunt">Grunt</a>), and use Github, there are a few key commands that will help you with your work flow.</p>

<h3 id="moving-around-the-terminal-prompt">Moving Around the Terminal Prompt</h3>
<ul>
  <li><code>ctrl</code> + <code>A</code> will bring you to the beginning of your line. Forgot to add sudo? Don‚Äôt wait to space through to the beginning of your line, simply press <code>ctrl</code> + <code>A</code> and get there. Alternatively, <code>!!</code> repeats the last command, so you could type <code>sudo !!</code> to yield the same result.</li>
  <li><code>ctrl</code> + <code>E</code> puts the cursor at the end of the line.</li>
</ul>

<h3 id="controlling-processes">Controlling Processes</h3>
<ul>
  <li><code>ctrl</code> + <code>Z</code> pauses a process. If you‚Äôre running Gulp and commit your changes, you don‚Äôt have to open a new tab. Just pause the process. Type <code>ctrl</code> + <code>Z</code>, and your terminal should allow entry for a new command. To see all of the paused processes, enter <code>jobs</code> ‚Äî a command that will list all of the paused jobs. Resume the process with <code>fg</code>, which stands for <em>‚Äúforeground‚Äù</em>. It brings your job from the background to the foreground</li>
  <li><code>ctrl</code> + <code>C</code> cancels a process. This is how you stop a process (such as Gulp). You will need to restart it</li>
</ul>

<h3 id="dealing-with-files">Dealing with Files</h3>
<ul>
  <li><code>open .</code> will open up the directory which you are currently in. This is great if you need a view of your file system. <code>open filename</code> will open the file itself.</li>
  <li><code>mkdir foldername</code> creates a folder <em>(mkdir = make directory)</em> within the directory you are currently inside of.</li>
  <li><code>touch filename</code> creates files. I use this often! You can also use a shortcut <code>:&gt;filename.txt</code> to save a few keystrokes. The <code>:</code> denotes an empty command.</li>
</ul>

<h3 id="editing-files">Editing Files</h3>
<ul>
  <li><code>vim</code> will open an in-terminal text-editor called <a href="http://www.openvim.com/">Vim</a>. You can do <code>vim .</code> to open and navigate the directory or open a specific file immediately with <code>vim filename</code>. Simply creating a file with <code>vim filename</code> and then saving it within vim <code>:w</code> creates a file on the fly as well. (Not going to go through all of Vim‚Äôs commands, but it‚Äôs pretty powerful and you should look into it)</li>
  <li>The <code>&amp;&amp;</code> allows you to string commands together. The <code>;</code> also allows this. The difference is that commands using <code>;</code> are executed regardless of the completion of other tasks in the system, while the <code>&amp;&amp;</code> are logical and only executed if the previous task completes. So you can do <code>mkdir hello; cd hello; touch world.txt &amp;&amp; vim world.txt</code></li>
  <li><code>subl .</code> is a popular symlink that enables you to open files directly in Sublime text. You need to set up this command with <a href="http://www.sublimetext.com/docs/3/osx_command_line.html">this</a> tutorial.</li>
</ul>

<p><br />
<img src="../images/posts/myterm.png" alt="My terminal" /></p>
<p class="caption">I'm using a modified version of the <a href="https://github.com/robbyrussell/oh-my-zsh/blob/master/themes/robbyrussell.zsh-theme">robbyrussell</a> zsh theme.</p>

<h2 id="customizing-your-terminal">Customizing Your Terminal</h2>

<p>Z Shell (Zsh) is a Unix shell that boosts the power of your typical Bash prompt. Specifically, it has better tab completion among other things, or so I hear. You will now have to edit your <code>.zshrc</code> instead of <code>.bashrc</code> profile for aliases and some other tasks. <a href="https://github.com/robbyrussell/oh-my-zsh">Oh My Zsh</a> is a community-driven effort to provide customizations for Z Shell, and can really transform your terminal experience. Not only are there tons of beautiful themes, but it allows easy and invaluable git integration that will surely change your life. You can install it with one simple script:</p>

<pre><code>curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
</code></pre>

<h2 id="custom-commands">Custom Commands</h2>

<p>Writing your own terminal shortcuts is easy and fun! You can do this in a few ways. I‚Äôm going to assume you‚Äôve installed Z Shell and Oh My Zsh from the previous section (because you should!) and it would take a while to go through every method to add aliases. So I‚Äôll talk about two places you can write your aliases.</p>

<h3 id="aliases">Aliases</h3>

<p>The first is in your <em>.zshrc</em> file (typically located in your root directory, so you can access it with <code>vim ~/.zshrc</code> or <code>subl ~/.zshrc</code> or <code>open ~/.zshrc</code> <em>(look at all of the options you now have!)</em>). Oh My Zsh will have some configuration settings you can uncomment in there, and you can also create aliases in this file begining with <code>alias</code>!</p>

<p>The second thing you can do is create a new shell script file and link to it from the <em>.zshrc</em> file using <code>source</code>. For example, if I make a file within the same directory, I would put <code>source "/Users/unakravets/.aliases.sh"</code> in the <em>.zshrc</em> file. All of my aliases would go into <em>aliases.sh</em>. This allows for a better file organization and overall cleaner system.</p>

<p>Whichever way you do it, let‚Äôs see an example. This alias will open up the emoji cheat sheet. Super important for git commit messages and life in general:</p>

<pre><code># open up emoji cheat sheet in browser
alias emojis="open http://www.emoji-cheat-sheet.com/"
</code></pre>

<p>Here‚Äôs another example. This alias gives me a beautiful visualization of my git history and branches right inside of my terminal. All i‚Äôd have to do is type git-pretty and BAM!:</p>

<pre><code># pretty visual git history
alias git-pretty="git log --graph --oneline --all --decorate"
</code></pre>

<h3 id="functions">Functions</h3>

<p>Functions allow for some great extensibility of custom commands in your terminal. Here is an example of a basic function that makes a folder and then opens up into it:</p>

<pre><code>function mkd() {
    mkdir "$@" &amp;&amp; cd "$@"
}
</code></pre>

<p>You can get a bit fancier with functions by including loops and logic. Here is a function I wrote to add items to my content-I-want-to-read/watch/etc list in my Open Source <a href="http://github.com/una/personal-goals">Personal Goals Repo</a>:</p>

<pre><code># add to content list (opens content list folder in vim)
# i.e. pg-add blog-post or pd-add resource
function pg-add() {
  if [ $# -eq 0 ]; then
      print "Oops. Please enter a content type! (i.e. pg-add video)"
    else
      vim ~/Desktop/Dev/personal-goals/content-list/"$1"s.md
  fi

}
</code></pre>
<p class="caption">For more information about what's going on here, check out this <a href="http://una.github.io/personal-goals-guide">blog post</a>.</p>

<p>Let‚Äôs break down some of that function syntax:</p>

<ul>
  <li><code>$#</code> = these are your parameters. For instance, <code>$1 $2</code> refer to your first two parameters after your command. If I typed <code>return-me wild unicorn</code> with the function being <code>return-me</code>, <code>$1</code> would be <code>wild</code> and <code>$2</code> would be <code>unicorn</code>.</li>
  <li><code>-eq</code> = is equal to. What the function above is saying is ‚Äúif the number of parameters is equal to zero‚Äù AKA if I have no parameters, let me know I messed up.</li>
  <li><code>$@</code> captures all of the arguments (first example).</li>
  <li>For more information on how to write your own functions and what the proper syntax is, check out a <a href="http://www.calpoly.edu/~rasplund/script.html">unix</a> <a href="http://www.freeos.com/guides/lsst/ch02sec01.html">shell</a> <a href="http://www.livefirelabs.com/unix_tip_trick_shell_script/unix_shell_scripting/unix-shell-scripting-tutorial.htm">scripting</a> <a href="https://www.youtube.com/watch?v=JxZl3yi41fA">tutorial</a>.</li>
  <li><code>fi</code> means <a href="http://bash.cyberciti.biz/guide/If..else..fi">finish</a>. But you knew that already.</li>
</ul>

<p>You can use functions and aliases to do pretty much anything and really tailor them to your personal work flow. Open a specific folder often? Write an alias so you can access it from anywhere. Once you start, you‚Äôll find more and more ways to optimize your setup and love the terminal!</p>

<p><strong>tl;dr: Terminal is your friend. Embrace it!</strong></p>
:ET