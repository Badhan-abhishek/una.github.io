I"ü*<p><strong>I made a <a href="https://github.com/una/svg-icon-system-boilerplate">boilerplate</a> for the system described in this post:</strong></p>

<p><small>P.S. Please ignore the awful title of the blog post. I couldn‚Äôt figure out what to call it.</small></p>

<p>Icons! We see them all over the web, and they‚Äôre essential to most pattern libraries and web design systems. I recently needed to implement such a system. It had to be non-prescriptive, scalable, and dynamically editable via CSS. The icons were to be used by multiple teams in many different applications, built with various frameworks and techniques. They needed to have the ability to be restyled, get cached, and be updated quickly and easily as more icons are added. Basically, the icon system needed to be really, really flexible. <em>Challenge accepted.</em></p>

<h2 id="why-svg-icons">Why SVG Icons?</h2>

<p>There are basically three options we have when it comes to icon systems:</p>

<ul>
  <li>Font/glyph icons</li>
  <li>CSS-based data URIs</li>
  <li>SVG icons</li>
</ul>

<p><strong>SVG icons are superior.</strong> I‚Äôm <em>(not)</em> sorry ‚Äî they are. SVG is scalable, widely-supported, and allows for much more flexibility and dynamic editing. This post isn‚Äôt going to go in depth on the benefits of SVG icons over the other systems because <a href="http://ianfeather.co.uk/ten-reasons-we-switched-from-an-icon-font-to-svg/">so</a> <a href="http://www.sitepoint.com/icon-fonts-vs-svg-debate/">many</a> <a href="https://medium.com/@webprolific/why-and-how-i-m-using-svg-over-fonts-for-icons-7241dab890f0">others</a> <a href="https://css-tricks.com/icon-fonts-vs-svg/">have</a>.</p>

<p>Font icons and data URI‚Äôs in CSS content are a <a href="http://una.im/Internet-is-hacks/#üíÅ">hack</a>, while SVG icons represent visualizations in the format we expect without weird workarounds for breaking accessibility due to re-defining native DOM elements.</p>

<h2 id="svg-icon-options">SVG Icon Options</h2>

<p>Okay, great. We‚Äôve decided on using SVG icons! But there more than a few ways to implement SVG into the DOM, each with their own pros and cons. I initially outlined the pros and cons of each, but it made this article way too long and out of scope. Some of the methods I considered include:</p>

<ol>
  <li>Inline SVG
    <ul>
      <li>Using individual SVG‚Äôs as <code>&lt;img&gt;</code>‚Äôs</li>
      <li><a href="https://css-tricks.com/css-sprites/">SVG CSS Sprite</a> accessed via <code>&lt;view&gt;</code></li>
      <li><a href="https://css-tricks.com/svg-use-with-external-reference-take-2">SVG Symbol Sprite</a> accessed via <code>&lt;use&gt;</code></li>
      <li><a href="http://simurai.com/blog/2012/04/02/svg-stacks">SVG Stacked Sprite</a></li>
    </ul>
  </li>
</ol>

<p>Ultimately I went with Method 4: the SVG Symbol Sprite because of the following benefits:</p>

<ul>
  <li>Eliminate HTTP requests (with this singular asset)</li>
  <li>Create and use a cacheable asset</li>
  <li>Faster page load time because all of the above</li>
  <li>Provide a ‚ÄúSingle Source of Truth‚Äù to reference and link to</li>
  <li>SVG properties are editable in CSS</li>
  <li>SVG is animatable in CSS or JS</li>
</ul>

<p>I also decided to use an <strong>‚Äúexternal‚Äù SVG sprite</strong>. I put external in quotes because the SVG must still be within the same site as it is used in to avoid security issues and cross-origin errors (the bane of my existence right now). But when it works, it means the SVG does not need to live in the head of the same document on which the icons are being used.</p>

<figure class="half--right" style="margin-top: -1em;">
  <img src="../../images/posts/svg-icons/cute-icons-2.jpg" alt="cute icons" />
  <figcaption>This is what you get Googling "cute icons"</figcaption>
</figure>

<p><em>Note:</em> if you‚Äôve got a templating system and don‚Äôt mind the post-render bloat, there‚Äôs nothing wrong with inlining the SVG and it even saves you an HTTP request, but I wanted to make this as agnostic as possible. Also, with external sprites, there is a compatibility issue for IE, but we‚Äôll get into a polyfill for that later.</p>

<h2 id="making-it-dynamic">Making it Dynamic</h2>

<p>Unfortunately, we can‚Äôt simply reference an SVG element and be able to edits its paths (i.e. <code>&lt;img src="apple.svg" style="fill:green"&gt;</code> will not let you edit the color of the apple to make it green).</p>

<p>But the <code>&lt;symbol&gt;</code> method allows us to reference our SVG‚Äôs as though they are inlined on the page! The <code>&lt;symbol&gt;</code> tag separates out icons, and the <code>&lt;use&gt;</code> tag allows access to them. <em>oOoOoh this is getting good.</em></p>

<p>So when we‚Äôre making our SVG sprite sheet, it doesn‚Äôt look like an SVG CSS sprite sheet (where you are taking individual SVGs and using <code>&lt;view&gt;</code> to determine what portion of the larger image we see:</p>

<p><img style="margin: 2em auto 3em" src="../../images/posts/svg-icons/icons.png" alt="icons" /></p>

<p>With <code>&lt;symbol&gt;</code>, the icons are more <em>symbolic</em> (pun totally intended). If you preview a <em>symbol-based SVG</em>, it will look blank, though all the icons exist as individual <code>&lt;symbols&gt;</code>‚Äôs and are ready for <code>&lt;use&gt;</code>-age.</p>

<h2 id="making-it-systematic">Making it Systematic</h2>

<p>Alright. So this seemed to be the best approach, now how can we build it to be scale-able? Let‚Äôs make this a system that is easy to use and update.</p>

<h3 id="generating-the-sprite">Generating the Sprite</h3>

<p>The first step is to generate an SVG sprite. Luckily, <a href="https://twitter.com/jkphl">Joschi Kuphal</a> made an awesome tool called <a href="https://github.com/jkphl/svg-sprite">SVG Sprite</a> which he also ported into Gulp with <a href="https://github.com/jkphl/gulp-svg-sprite">gulp-svg-sprite</a>. I really like Gulp as a build tool because I think it‚Äôs the most lucid in terms of what tasks are running.</p>

<p>The SVG Sprite tool is seriously awesome. It provides options for all of the sprite options mentioned above in this post and even some additional niceties such as cache busting and building a reference page for you. The reference page is <em>fantastic</em>! These are the options I set inside of my <em>gulpfile.js</em> to generate the <code>&lt;symbol&gt;</code> sprite I needed:</p>

<pre><code class="language-js">// SVG Config
var config = {
  mode: {
    symbol: { // symbol mode to build the SVG
      render: {
        css: false, // CSS output option for icon sizing
        scss: false // SCSS output option for icon sizing
      },
      dest: 'sprite', // destination folder
      prefix: '.svg--%s', // BEM-style prefix if styles rendered
      sprite: 'sprite.svg', //generated sprite name
      example: true // Build a sample page, please!
    }
  }
};
</code></pre>

<p>You can also set an option to render a stylesheet that helps size icons, but I removed those (shown above as set to false) because I like to style the icon individually and let it‚Äôs default take the size of it‚Äôs parent. These styles also correlate with the prefix option above.</p>

<h3 id="adding-icons">Adding Icons</h3>

<p>Every individual SVG icon is added into a base folder (I just used <em>svg/</em>). Another awesome advantage of SVG Sprite is that it respects a folder system for naming icons. What this means is, if my base folder is <em>svg/</em> anything within that folder can be referenced via its name, and anything within a folder gets prepended. Here‚Äôs what I mean:</p>

<pre><code class="language-scss">svg/
|-- bubbles.svg //sprite.svg#bubbles
|-- cog.svg     //sprite.svg#cog
|
|__ glasses/
    |-- martini.svg //sprite.svg#glasses--martini
    |__ wine.svg    //sprite.svg#glasses--wine

</code></pre>

<p>With that naming structure in mind, you can now teach your designers how to add icons to that folder and submit pull requests! <em>Yay for efficiency!</em> When new icons are added, they don‚Äôt affect existing icons, but instead grow the system‚Äôs icon options.</p>

<h3 id="reference-page">Reference Page</h3>

<p>The auto-generated reference page helps you keep track of icon options and their name references:</p>

<p><img src="../../images/posts/svg-icons/page.png" alt="" /></p>

<h2 id="usage">Usage</h2>

<p>In HTML, you need just 2 elements to reference your icons with:</p>

<pre><code class="language-html">&lt;svg&gt;
  &lt;use xlink:href="sprite.svg#glasses--wine"&gt;&lt;/use&gt;
&lt;/svg&gt;
</code></pre>

<p>You may then style this SVG in CSS. Make sure to give it a width and height (default is 100% of parent). If you turned on the stylesheet rendering options above, you can include or link to the generated stylesheet. It is best to edit these icons in CSS after adding a class to the <code>&lt;svg&gt;</code>. For example:</p>

<p>HTML:</p>

<pre><code class="language-html">&lt;svg class="icon--wineglass"&gt;
  &lt;use xlink:href="sprite.svg#glasses--wine"&gt;&lt;/use&gt;
&lt;/svg&gt;
</code></pre>

<p>Sass:</p>

<pre><code class="language-scss">.icon--wineglass {
  fill: red; // additional styling

  &amp;:hover {
    fill: white; // styling on hover
  }
}
</code></pre>

<h2 id="caveats">Caveats</h2>

<p>There are a few things to note if implementing a system like this (particularly about the external SVG). Due to cross-origin reference issues (CORS) the SVG must be located on the same domain as your website. Also, every browser except for IE 9-11 that support inline SVG support external SVG links, though you can polyfill this capability with <a href="https://github.com/jonathantneal/svg4everybody">SVG4Everybody</a> or <a href="https://github.com/Keyamoon/svgxuse">SVGxUse</a>.</p>

<p>Keep in mind, for performance purposes, since icons are presentational, you can likely <em>defer</em> the loading of the polyfill scripts to not disrupt the load time of the rest of your assets.</p>

<p>Another caveat is that, while you can edit the entire SVG, you can‚Äôt edit specific paths and groups within SVG‚Äôs when using <code>&lt;use&gt;</code>. This is because <em>the browser treats</em> <code>&lt;use&gt;</code> <em>like the shadow DOM</em>. <a href="https://twitter.com/chriscoyier">Chris Coyier</a> wrote a few <a href="https://css-tricks.com/svg-sprites-use-better-icon-fonts/">excellent</a> <a href="https://css-tricks.com/svg-use-with-external-reference-take-2/">posts</a> on CSS Tricks for further reference.</p>

<p><strong>TL;DR: Here‚Äôs a <a href="https://github.com/una/svg-icon-system-boilerplate">boilerplate</a> for a pretty good SVG Icon System.</strong></p>

<p><small>Shoutout to <a href="https://twitter.com/mylifeasalllly">Ally Palanzi</a> for proofreading and <a href="https://twitter.com/SaraSoueidan">Sara Soueidan</a> for pointing out you don‚Äôt need &lt;defs&gt;!</small></p>
:ET